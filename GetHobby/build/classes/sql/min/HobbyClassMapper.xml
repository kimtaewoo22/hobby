<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="HobbyClassMapper">
	<!--
		event / lessonDate / hashtag / steamCheck는 hobbyclass table에 없음
	 -->
 	<resultMap id="hobbyClassMap" type="hobbyClass">
 		<result property="hobbyClassNo" 		column="class_no" 		jdbcType="INTEGER" />
 		<result property="user.userId" 			column="user_id" 		jdbcType="VARCHAR" />
 		<result property="user.nickName"  	 	column="nickname"       jdbcType="VARCHAR" />
 		<result property="user.profileImage" 	column="profile_image" 	jdbcType="VARCHAR" />
 		<result property="user.role" 			column="role" 			jdbcType="VARCHAR" />
 		<result property="hobbyClassName"   	column="class_title" 	jdbcType="VARCHAR" />
 		<result property="hobbyClassImage" 		column="class_image" 	jdbcType="VARCHAR" />
 		<result property="hobbyClassIntro"  	column="class_intro"    jdbcType="CLOB" 	javaType="java.lang.String"/>
 		<result property="hobbyClassPrice"  	column="class_price"  	jdbcType="INTEGER" />
 		<result property="kitName" 				column="kit_name" 	 	jdbcType="VARCHAR" />
 		<result property="kitImage" 	 		column="kit_image" 	 	jdbcType="VARCHAR" />
 		<result property="kitPrice" 	 		column="kit_price" 	 	jdbcType="INTEGER" />
 		<result property="kitIntro" 	 		column="kit_intro" 	 	jdbcType="VARCHAR" />
 		<result property="startDate" 	 		column="start_date"  	jdbcType="DATE"    />
 		<result property="endDate" 	 	  		column="end_date" 	 	jdbcType="DATE"    />
 		<result property="category" 	 		column="category" 	 	jdbcType="CHAR" />
 		<result property="lessonTotalCount" 	column="total_lesson" 	jdbcType="INTEGER" />
 		<result property="hobbyClassPersonnel"  column="total_student"  jdbcType="INTEGER" />
 		<result property="hobbyClassState" 	 	column="class_state"  	jdbcType="CHAR"    />
 		<result property="totalMoney"  	 	 	column="total_money" 	jdbcType="INTEGER" />
 		<result property="steamCount" 	 	 	column="total_steam" 	jdbcType="INTEGER" />
 		<result property="totalGrade" 	 	 	column="total_grade"  	jdbcType="NUMERIC" /> 
 		<result property="steamCheck" 	 	 	column="steam_check"    jdbcType="VARCHAR" />
 	</resultMap>
	
	<resultMap id="classAssessMap" type="classAssess">
		<result property="assessNo" 	 	 				column="assess_no" 	 	jdbcType="INTEGER" />
		<result property="hobbyClass.hobbyClassNo"			column="class_no" 	 	jdbcType="INTEGER" />
		<result property="hobbyClass.hobbyClassName" 	 	column="class_title" 	jdbcType="VARCHAR" />
		<result property="user.userId" 	 	 	 			column="user_id"  	 	jdbcType="VARCHAR" />
		<result property="user.profileImage" 	 			column="profile_imgae"  jdbcType="VARCHAR" />
		<result property="user.nickName" 	 	 			column="nickname" 	 	jdbcType="VARCHAR" />
		<result property="assessStar" 	 	 				column="assess_star"    jdbcType="INTEGER" />
		<result property="assessContent"  	 				column="assess_content" jdbcType="VARCHAR" />
		<result property="regDate" 	 	 		 			column="reg_date"  	 	jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="lessonMap" type="lesson">
		<result property="lessonNo" 					column="lesson_no" 		jdbcType="INTEGER" />
		<result property="hobbyClass.hobbyClassNo" 		column="class_no"		jdbcType="INTEGER" />
		<result property="hobbyClass.hobbyClassName"	column="class_title"	jdbcType="VARCHAR" />
		<result property="lessonTitle"					column="lesson_title"   jdbcType="VARCHAR" />
		<result property="lessonImage" 					column="lesson_image"   jdbcType="VARCHAR" />
		<result property="lessonIntro" 	 	 	 	 	column="lesson_intro"   jdbcType="VARCHAR" />
		<result property="lessonContent" 	 	 		column="lesson_content" jdbcType="CLOB" 	javaType="java.lang.String" />
		<result property="lessonProject" 				column="lesson_project" jdbcType="VARCHAR" />
		<result property="lessonVideo"	 	 	 		column="lesson_video"   jdbcType="VARCHAR" />
		<result property="totalCount"	 	 	 		column="total_count" 	jdbcType="INTEGER" />
		<result property="currentCount" 	 	 		column="ROWNUM"  	 	jdbcType="INTEGER" />
	</resultMap>
	
	<resultMap id="lessonTimesMap" type="lessonTimes">
		<result property="timeNo" 					column="time_no"		jdbcType="INTEGER" />
		<result property="user.userId"				column="user_id"		jdbcType="VARCHAR" />
		<result property="lesson.lessonNo"  		column="lesson_no"      jdbcType="INTEGER" />
		<result property="currentTimes"  			column="current_times"  jdbcType="INTEGER" />
		<result property="totalTimes"  				column="total_times" 	jdbcType="INTEGER" />
		<result property="maxTimes" 				column="max_times" 		jdbcType="INTEGER" />
		<result property="hobbyClass.hobbyClassNo" 	column="class_no"		jdbcType="INTEGER" />
	</resultMap>
	
	<resultMap id="userMap" type="user">
		<result property="userId"		column="user_id"		jdbcType="VARCHAR" />
		<result property="sex"	 	 	column="sex"	 	 	jdbcType="CHAR"    />
		<result property="role"	 	 	column="role" 	 	 	jdbcType="CHAR"    />
		<result property="phone"   		column="phone" 	 	 	jdbcType="VARCHAR" />
		<result property="name" 	 	column="name" 	 	 	jdbcType="VARCHAR" />
		<result property="profileImage" column="profile_image" 	jdbcType="VARCHAR" />
		<result property="totalReport"  column="total_report"   jdbcType="INTEGER" />
		<result property="birth" 	 	column="birth_date" 	jdbcType="VARCHAR" />
		<result property="nickName" 	column="nickname"       jdbcType="VARCHAR" />
	</resultMap>
	
 	<select id="getHobbyClass" parameterType="java.util.Map" resultMap="hobbyClassMap">
 		SELECT  
 		hc.class_no, hc.user_id, hc.class_title, hc.class_image, hc.class_state, hc.class_intro, hc.class_price, hc.total_money, 
 		hc.total_lesson, hc.total_student, hc.total_steam, TO_DATE(TO_CHAR(hc.start_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') start_date, TO_DATE(TO_CHAR(hc.end_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') end_date, 
 		hc.category, hc.kit_name, hc.kit_price, u.nickname, u.profile_image, u.role, NVL2(s.steam_no, '1', '0') steam_check, NVL(grade.assess_star, 0) total_grade  
 		FROM hobbyclass hc, users u, ( SELECT
 						  	     	   steam_no, class_no 
 						  	     	   FROM steam 
 						  	     	   WHERE user_id = #{userId:VARCHAR} AND class_no = #{hobbyClassNo} 	
 						  	      	  ) s , ( SELECT 
 						  	      		      AVG(assess_star) AS assess_star 
 						  	      		      FROM class_assess 
 						  	      		      WHERE class_no = #{hobbyClassNo} 
 						  	      		    ) grade 
 		WHERE hc.class_no = #{hobbyClassNo} 
 		      AND hc.user_id = u.user_id 
 		      AND hc.class_no = s.class_no(+) 
 	</select>
 	
 	<select id="getHobbyClassHashtag" parameterType="java.lang.Integer" resultType="java.lang.String">
 		SELECT 
 		hashtag_code 
 		FROM hashtag 
 		WHERE class_no = #{hobbyClassNo} 
 	</select>
	
	<sql id="hobbyClassList">
		SELECT 
 		hc.class_no, hc.user_id, hc.class_title, hc.class_image, hc.class_state, hc.class_intro, hc.class_price, hc.total_money, 
 		hc.total_lesson, hc.total_student, hc.total_steam, TO_DATE(TO_CHAR(hc.start_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') start_date, TO_DATE(TO_CHAR(hc.end_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') end_date, 
 		hc.category, hc.kit_name, hc.kit_price, u.nickname, u.profile_image, u.role, NVL2(s.steam_no, '1', '0') steam_check, NVL(grade.assess_star, 0) total_grade     
 		FROM hobbyclass hc, users u, ( SELECT 
 									   steam_no, class_no 
 									   FROM steam 
 									   WHERE user_id = #{userId:VARCHAR}    
 									 ) s, 
 									   <if test="search.hashtag != null" >
 									 	  ( SELECT  
 									        class_no, 
 									        substr(xmlagg(xmlelement(a, '/' || hashtag_code) ORDER BY hashtag_code).extract('//text()'), 2) hashtag_code 
 									        FROM hashtag   
 									        <where>
		 									    <foreach collection="search.hashtag" item="index" open="(" close=")" separator="or"> 
		 									        hashtag_code = #{index}  
		 									     </foreach>  
		 									</where> 
		 									 GROUP BY class_no 
 									 	  ) h ,
 									   </if>  	   
 									 	  	    ( SELECT 
 						  	      		      	  class_no, AVG(assess_star) AS assess_star 
 						  	      		      	  FROM class_assess 
 						  	      		      	  GROUP BY class_no 
 						  	      		    	) grade  
 		WHERE hc.class_no = s.class_no(+)  
 		      AND hc.user_id = u.user_id 
 		      <if test="search.hashtag != null">
 		      	AND hc.class_no = h.class_no 
 		      </if>
 		      AND hc.class_no = grade.class_no(+) 
 		      <if test="search.searchCondition == 1">
 		      		AND hc.class_title LIKE ('%' || #{search.searchKeyword} || '%')  
 		      </if>
 		      <if test="search.searchCondition == 2">
 		      		AND u.nickname LIKE ('%' || #{search.searchKeyword} || '%')  
 		      </if>
 		      <if test="classState != null">
 		      	    AND hc.class_state = #{classState}  
 		      </if> 
 		      <if test="search.category != null">
 		      	    AND hc.category = #{search.category}   
 		      </if> 
 		ORDER BY hc.class_no ASC 
	</sql>
	
	<select id="getHobbyClassList" parameterType="java.util.Map" resultMap="hobbyClassMap">
		SELECT 
 		* 
 		FROM ( SELECT 
 		       inner_table.*, ROWNUM AS row_seq 
 		       FROM ( <include refid="hobbyClassList" /> 
 		            ) inner_table 
 		       <where>
 		           ROWNUM <![CDATA[<=]]> #{search.currentPage} * #{search.pageSize} 
 		       </where>
 			  )
 	    <where>
 	     	row_seq BETWEEN ( #{search.currentPage} - 1 ) * #{search.pageSize}  + 1 AND #{search.currentPage} * #{search.pageSize} 
 	    </where>
	</select>
	
	<sql id="assessList">
		SELECT 
		ca.assess_no, u.user_id, u.profile_image, u.nickname, hc.class_no, hc.class_title, ca.assess_content, TO_CHAR(ca.reg_date, 'YYYY-MM-DD') reg_date, ca.assess_star 
		FROM users u, class_assess ca, hobbyclass hc 
		WHERE ca.user_id = u.user_id 
		      AND ca.class_no = hc.class_no 
		      AND ca.class_no = #{hobbyClassNo} 
        ORDER BY ca.assess_no DESC  
	</sql>
	
	<select id="getHobbyClassAssessContent" parameterType="java.util.Map" resultMap="classAssessMap">
		SELECT 
 		* 
 		FROM ( SELECT 
 		       inner_table.*, ROWNUM AS row_seq 
 		       FROM ( <include refid="assessList" /> 
 		            ) inner_table 
 		       <where>
 		           ROWNUM <![CDATA[<=]]> #{search.currentPage} * #{search.pageSize} 
 		       </where>
 			  )
 	    <where>
 	     	row_seq BETWEEN ( #{search.currentPage} - 1 ) * #{search.pageSize}  + 1 AND #{search.currentPage} * #{search.pageSize} 
 	    </where>
	</select>
	
	<select id="getHobbyClassLessonContent" parameterType="java.lang.Integer" resultMap="lessonMap" >
		SELECT 
		ROWNUM, inner_table.*, sum.total_count, hc.class_no  
		FROM hobbyclass hc, ( SELECT 
                      		  lesson_no, class_no, lesson_video, lesson_content, lesson_project, lesson_image, lesson_intro, lesson_title 
                      		  FROM lesson 
                      		  WHERE class_no = #{hobbyClassNo}  
                      		  ORDER BY lesson_no ) inner_table , ( SELECT 
                                                           		   COUNT(lesson_no) total_count
                                                           		   FROM lesson 
                                                           		   WHERE class_no = #{hobbyClassNo}  
                                                           		 ) sum 
	    WHERE inner_table.class_no = hc.class_no 
	</select>
	
	<select id="getLessonTimesList" parameterType="java.util.Map" resultMap="lessonTimesMap">
		SELECT 
		time_no, lesson_no, user_id, current_times, total_times, max_times, class_no  
		FROM lesson_times 
		WHERE user_id = #{userId} AND class_no = #{hobbyClassNo}  
	</select>
	
	<sql id="popularHobbyClassList">
		SELECT 
		hc.class_no, hc.user_id, hc.class_title, hc.class_image, hc.class_state, hc.class_intro, hc.class_price, hc.total_money, 
 		hc.total_lesson, hc.total_student, hc.total_steam, TO_DATE(TO_CHAR(hc.start_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') start_date, TO_DATE(TO_CHAR(hc.end_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') end_date, 
 		hc.category, hc.kit_name, hc.kit_price, u.nickname, u.profile_image, u.role, NVL2(s.steam_no, '1', '0') steam_check, NVL(grade.assess_star, 0) total_grade  
 		FROM hobbyclass hc, users u, ( SELECT
 						  	     	   steam_no, class_no 
 						  	     	   FROM steam 
 						  	     	   WHERE user_id = #{userId:VARCHAR} 
 						  	      	  ) s , ( SELECT 
 						  	      		      class_no, AVG(assess_star) AS assess_star 
 						  	      		      FROM class_assess 
 						  	      		      GROUP BY class_no 
 						  	      		    ) grade 
 		WHERE hc.user_id = u.user_id 
 		      AND hc.class_no = s.class_no(+) 
 		      AND hc.total_steam <![CDATA[>=]]> 200 
 		      AND hc.class_no = grade.class_no(+)  
 		      AND hc.class_state = '3' 
	</sql>
	
	<select id="getpopularHobbyClassList" parameterType="java.util.Map" resultMap="hobbyClassMap">
		SELECT 
 		* 
 		FROM ( SELECT 
 		       inner_table.*, ROWNUM AS row_seq 
 		       FROM ( <include refid="popularHobbyClassList" /> 
 		            ) inner_table 
 		       <where>
 		           ROWNUM <![CDATA[<=]]> #{search.currentPage} * #{search.pageSize} 
 		       </where>
 			  )
 	    <where>
 	     	row_seq BETWEEN ( #{search.currentPage} - 1 ) * #{search.pageSize}  + 1 AND #{search.currentPage} * #{search.pageSize} 
 	    </where>
	</select>
	
	<sql id="registerHobbyClassList">
		SELECT 
		hc.class_no, hc.user_id, hc.class_title, hc.class_image, hc.class_state, hc.class_intro, hc.class_price, hc.total_money, 
 		hc.total_lesson, hc.total_student, hc.total_steam, TO_DATE(TO_CHAR(hc.start_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') start_date, TO_DATE(TO_CHAR(hc.end_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') end_date, 
 		hc.category, hc.kit_name, hc.kit_price, u.nickname, u.profile_image, u.role, NVL2(s.steam_no, '1', '0') steam_check, NVL(grade.assess_star, 0) total_grade  
 		FROM hobbyclass hc, users u, ( SELECT
 						  	     	   steam_no, class_no 
 						  	     	   FROM steam 
 						  	     	   WHERE user_id = #{userId:VARCHAR} 
 						  	      	  ) s , ( SELECT 
 						  	      		      class_no, AVG(assess_star) AS assess_star 
 						  	      		      FROM class_assess 
 						  	      		      GROUP BY class_no 
 						  	      		    ) grade 
 		WHERE hc.user_id = u.user_id 
 		      AND hc.class_no = s.class_no(+) 
 		      AND hc.class_no = grade.class_no(+)  
 		      AND hc.class_state = '3' 
 		ORDER BY start_date DESC 
	</sql>
	
	<select id="getRegisterHobbyClassList" parameterType="java.util.Map" resultMap="hobbyClassMap">
		SELECT 
 		* 
 		FROM ( SELECT 
 		       inner_table.*, ROWNUM AS row_seq 
 		       FROM ( <include refid="registerHobbyClassList" /> 
 		            ) inner_table 
 		       <where>
 		           ROWNUM <![CDATA[<=]]> #{search.currentPage} * #{search.pageSize} 
 		       </where>
 			  )
 	    <where>
 	     	row_seq BETWEEN ( #{search.currentPage} - 1 ) * #{search.pageSize}  + 1 AND #{search.currentPage} * #{search.pageSize} 
 	    </where>
	</select>
	
	<insert id="addClassAssess" parameterType="classAssess"> 
		INSERT 
		INTO class_assess( assess_no, class_no, user_id, assess_content, reg_date, assess_star ) 
		VALUES( seq_class_class_assess_no.nextval, #{hobbyClass.hobbyClassNo}, #{user.userId}, #{assessContent}, SYSDATE, #{assessStar} ) 
	</insert>
	
	<select id="getUserSelectHashtag" parameterType="java.lang.String" resultType="java.lang.String" >
		SELECT  
		hashtag_code 
		FROM hashtag 
		WHERE user_id = #{userId} 
	</select>
	
	<sql id="steamHobbyClassList">
		SELECT 
		hc.class_no, hc.user_id, hc.class_title, hc.class_image, hc.class_state, hc.class_intro, hc.class_price, hc.total_money, 
 		hc.total_lesson, hc.total_student, hc.total_steam, TO_DATE(TO_CHAR(hc.start_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') start_date, TO_DATE(TO_CHAR(hc.end_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') end_date, 
 		hc.category, hc.kit_name, hc.kit_price, u.nickname, u.profile_image, u.role, NVL2(s.steam_no, '1', '0') steam_check, NVL(grade.assess_star, 0) total_grade  
 		FROM hobbyclass hc, users u, ( SELECT
 						  	     	   steam_no, class_no 
 						  	     	   FROM steam 
 						  	     	   WHERE user_id = #{userId}  
 						  	      	  ) s , ( SELECT 
 						  	      		      class_no, AVG(assess_star) AS assess_star 
 						  	      		      FROM class_assess 
 						  	      		      GROUP BY class_no 
 						  	      		    ) grade 
 		WHERE hc.user_id = u.user_id 
 		      AND hc.class_no = s.class_no 
 		      AND hc.class_no = grade.class_no(+)  
 		      AND hc.class_state = '3' 
 		ORDER BY start_date DESC 
	</sql>
	
	<select id="getSteamHobbyClassList" parameterType="java.util.Map" resultMap="hobbyClassMap">
		SELECT 
 		* 
 		FROM ( SELECT 
 		       inner_table.*, ROWNUM AS row_seq 
 		       FROM ( <include refid="steamHobbyClassList" /> 
 		            ) inner_table 
 		       <where>
 		           ROWNUM <![CDATA[<=]]> #{search.currentPage} * #{search.pageSize} 
 		       </where>
 			  )
 	    <where>
 	     	row_seq BETWEEN ( #{search.currentPage} - 1 ) * #{search.pageSize}  + 1 AND #{search.currentPage} * #{search.pageSize} 
 	    </where>
	</select>
	
	<select id="getPurchaseHobbyClassSchedule" parameterType="java.lang.String" resultMap="hobbyClassMap" >
		SELECT 
		hc.class_no, hc.user_id, hc.class_title, hc.class_image, hc.class_state, hc.class_intro, hc.class_price, hc.total_money, 
 		hc.total_lesson, hc.total_student, hc.total_steam, TO_DATE(TO_CHAR(hc.start_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') start_date, TO_DATE(TO_CHAR(hc.end_date, 'YYYY-MM-DD'), 'YYYY-MM-DD') end_date, 
 		hc.category, hc.kit_name, hc.kit_price 
 		FROM hobbyclass hc, purchase p   
 		WHERE hc.class_no = p.class_no  
 		      AND p.user_id = #{userId}  
 		      AND hc.class_state != '6' 
 		      AND hc.class_state != '7' 
	</select>
	
	<select id="getHobbyClassBuyerStats" parameterType="java.lang.String" resultMap="userMap">
		SELECT 
		u.user_id, u.name, u.nickname, u.birth_date, u.sex 
		FROM users u, purchase p 
		WHERE u.user_id = p.user_id 
			  AND p.class_no = #{hobbyClassNo} 
	</select>
	
	<insert id="addSteamHobbyClass" parameterType="java.util.Map">
		INSERT 
		INTO steam( steam_no, class_no, user_id ) 
		VALUES( seq_steam_steam_no.nextval, #{hobbyClassNo}, #{userId} )
	</insert>
	
	<update id="updateHobbyClassSteam" parameterType="java.util.Map">
		UPDATE 
		hobbyclass
		SET total_steam = #{steamCount}   
		WHERE class_no = #{hobbyClassNo} 
	</update>
	
	<delete id="deleteSteamHobbyClass" parameterType="java.util.Map">
		DELETE 
		FROM steam 
		WHERE user_id = #{userId} 
		      AND class_no = #{hobbyClassNo} 
	</delete>
	
</mapper>